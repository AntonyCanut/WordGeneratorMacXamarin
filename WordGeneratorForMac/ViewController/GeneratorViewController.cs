// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Text;
using System.Linq;

namespace WordGeneratorForMac
{
    public partial class GeneratorViewController : NSViewController
    {
        public GeneratorViewController(IntPtr handle) : base(handle)
        {
        }

        partial void GenerateButton_Clicked(NSObject sender)
        {
            ResultField.StringValue = MakeXML(WordField.AccessibilityValue);
        }

        partial void Copy_Clicked(NSObject sender)
        {
            var pasteboard = NSPasteboard.GeneralPasteboard;

            pasteboard.ClearContents();

            pasteboard.WriteObjects(new NSString[] { new NSString(ResultField.StringValue + "\n\t") });
        }

        private string MakeXML(string word)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<MOT nom=\"");
            sb.Append(word.ToUpperInvariant());

            sb.Append("\" nombre=\"");
            sb.Append(word.Length);

            sb.Append("\" lettres=\"");
            sb.Append(RandomLetters(word.ToUpperInvariant()));

            sb.Append("\" />");
            return sb.ToString();
        }

        private string RandomLetters(string word)
        {
            string[] tab = new string[12];
            Random r = new Random();

            while (true)
            {
                var positionInTab = r.Next(12);
                if (String.IsNullOrEmpty(tab[positionInTab]))
                    tab[positionInTab] = word[LettersInTab(tab)].ToString();

                if (LettersInTab(tab) == word.Length)
                    break;
            }

            while (true)
            {
                var positionInTab = r.Next(12);
                if (String.IsNullOrEmpty(tab[positionInTab]))
                    tab[positionInTab] = Encoding.ASCII.GetString(new byte[] { (byte)r.Next(65, 90) });
                if (LettersInTab(tab) == 12)
                    break;
            }

            StringBuilder sb = new StringBuilder();
            foreach (var character in tab)
            {
                sb.Append(character);
            }
            return sb.ToString();
        }

        private int LettersInTab(string[] tab)
        {
            return tab.Count(c => !string.IsNullOrEmpty(c));
        }
    }
}
